generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  username      String        @unique
  email         String        @unique
  walletAddress String?       @unique
  password      String
  stamina       Int           @default(10)
  lastStaminaUpdate DateTime  @default(now())
  characters    Character[]
  scenes        Scene[]
  sceneChoices  SceneChoice[]
  nftTransactions NFTTransaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  selectedCharacterId String? @db.ObjectId
  selectedCharacter   Character? @relation(name: "SelectedCharacter", fields: [selectedCharacterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staminaTransactions StaminaTransaction[]
}

model Character {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  imageUrl    String
  description String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  scenes      Scene[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  selectedByUsers User[] @relation("SelectedCharacter")
}

model Scene {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  imageUrl    String
  choices     String[]
  chapter     Int
  characterId String       @db.ObjectId
  character   Character    @relation(fields: [characterId], references: [id])
  userId      String       @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  nftMinted   Boolean      @default(false)
  nftTokenId  String?
  userChoices SceneChoice[]
  sceneNumber Int
  nftTransaction NFTTransaction?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      SceneStatus @default(GENERATING)

  @@unique([characterId, chapter, sceneNumber], name: "characterId_chapter_sceneNumber")
  @@index([userId, characterId])
}

enum SceneStatus {
  GENERATING
  COMPLETED
  FAILED
}

model SceneChoice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  sceneId     String   @db.ObjectId
  scene       Scene    @relation(fields: [sceneId], references: [id])
  choiceIndex Int
  choiceText  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, sceneId]) // Ensure one choice per user per scene
}

model NFTTransaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  tokenId     String   
  contractAddress String
  transactionHash String
  sceneId     String   @db.ObjectId
  scene       Scene    @relation(fields: [sceneId], references: [id])
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  ipfsUri     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([sceneId]) // One NFT per scene
}

model StaminaTransaction {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  amount          Int
  price           String
  transactionHash String
  status          String   @default("completed")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}
